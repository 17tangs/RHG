import sys


def keywordsIn():
    K = dict()
    kin = open('keywords.txt', 'r+')
    for line in kin:
        if(line != ""):
            pair = [e.strip() for e in line.split(':')]
            K[pair[0]] = pair[1]
    kin.close()
    return K

def readf():
    fin = open(sys.argv[1], 'r')
    content = fin.read()
    k = content.split('\n')
    l = []
    for line in k[1:]:
        if(line != ''):
            l.append(line)
    fin.close()
    return [k[0], l]

types = []
def parse(s):
    s = s.split('\t')
    del s[1]
    del s[len(s)-1]
    return s

def parseC(s):
    return ''.join(e for e in s if e.isalnum())

    
def parseType(n,s,K):
    t = s.lower()
    if("keyword" in t):
        v = s[s.index(':')+2:s.index(')')]
        if(v in K.keys()):
            if(n not in K[v]):
                K[v] += "," + n
        else:
            K[v] = n
        return "\"xs:string\" "
    elif("number" in t):
        return "\"xs:int\" "
    elif("string" in t or "rich" in t):
        return "\"xs:string\" "
    elif("image" in t or "pdf" in t or "iconClass" in t or "blank" in t or "seo" in t or "externalurl" in t):
        return "\"xs:string\" "
    elif("component" in t or "embedded" in t):
        x = parseC(s[s.index('(')-1:s.index(')')])
        types.append(x)
        return "\""+ x + "\" "
    else:
        return "\"" + s + "\" "
      

def element_block(l,k):
    if(l[2] == "Yes"):
        ma = " maxOccurs=\"unbounded\" "
    else:
        ma = ""
    if(l[3] == "No"):
        mi = " minOccurs=\"0\" "  
    else:
        mi = ""
    s = "<xs:element name=\"" + l[0] + "\" type="  +  parseType(l[0], l[1],k)  + ma + mi + "/>" + "\n"
    return s


def generate():
    K = keywordsIn()
    ls = readf()
    l = ls[1]
    name = ls[0]
    f = open(name+'.xsd', 'w')
    beginning  = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\" attributeFormDefault=\"unqualified\">\n"
    end = "\t\t</xs:sequence>\n\t</xs:complexType>\n</xs:schema>"
    eles = ["\t\t\t"+element_block(parse(s),K) for s in l]
    ty = list(set(types))
    print(ty)
    includes = "".join("\t\t<xs:include schemaLocation=\"" + t + ".xsd\"/>\n" for t in ty)
    middle = "\t<xs:complexType name=\""+name+"\">\n\t\t<xs:sequence>\n"
    middle += "".join(e for e in eles)
    final = beginning + includes + middle + end
    f.write(final)
    f.close()
    kout = open("keywords.txt", 'w')
    for i in K:
        kout.write(i + ": " + K[i] + "\n")
    kout.close()

generate()
